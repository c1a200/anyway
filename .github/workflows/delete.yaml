name: Delete

on:
  schedule:
    - cron: "0 3 * * *"  # 每天早上3点执行一次
  workflow_dispatch:

jobs:
  del_runs:
    runs-on: ubuntu-latest
    env:
      RETAIN_DAYS_AUTO: 7
      RETAIN_DAYS_MANUAL: 0
    steps:
      - name: Set retention days for manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: echo "RETAIN_DAYS=${{ env.RETAIN_DAYS_MANUAL }}" >> $GITHUB_ENV

      - name: Set retention days for scheduled trigger
        if: github.event_name == 'schedule'
        run: echo "RETAIN_DAYS=${{ env.RETAIN_DAYS_AUTO }}" >> $GITHUB_ENV

      - name: Debug Info
        run:          echo "Event:${{ github.event_name }}"
          echo "RETAIN_DAYS:${{ env.RETAIN_DAYS }}"

      - name: List and delete old workflow runs
        id: delete-runs
        uses: actions/github-script@v6
        with:
          script:            const axios = require('axios');

            const getRuns = async (page) => {
              const response = await axios.get(`https://api.github.com/repos/${{ github.repository }}/actions/runs`, {
                headers:{
                  Authorization:`Bearer ${{ secrets.GITHUB_TOKEN }}`,
                  'Content-Type':'application/json',
                  Accept:'application/vnd.github.v3+json',
                },
                params:{
                  per_page:100,
                  page:page,
                },
              });
              return response.data.workflow_runs;
            };

            const deleteRun = async (runId) => {
              const response = await axios.delete(`https://api.github.com/repos/${{ github.repository }}/actions/runs/${runId}`, {
                headers:{
                  Authorization:`Bearer ${{ secrets.GITHUB_TOKEN }}`,
                  'Content-Type':'application/json',
                  Accept:'application/vnd.github.v3+json',
                },
              });
              return response.status === 204;
            };

            const daysToMillis = days => days * 24 * 60 * 60 * 1000;
            const now = new Date();
            const retainDays = parseInt(process.env.RETAIN_DAYS);
            const cutoffDate = new Date(now - daysToMillis(retainDays));

            let page = 1;
            let runs = await getRuns(page);

            while (runs.length > 0) {
              for (const run of runs) {
                if (new Date(run.created_at) < cutoffDate && run.status !== 'in_progress' && run.status !== 'queued') {
                  const deleted = await deleteRun(run.id);
                  if (deleted) {
                    console.log(`Deleted run:${run.id}`);
                  } else {
                    console.log(`Failed to delete run:${run.id}`);
                  }
                }
              }
              page += 1;
              runs = await getRuns(page);
            }
