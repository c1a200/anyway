name: Delete

on:
  schedule:
    - cron: "0 3 * * *"  # 每天早上3点执行一次
  workflow_dispatch:

jobs:
  del_runs:
    runs-on: ubuntu-latest
    env:
      RETAIN_DAYS_AUTO: 7
      RETAIN_DAYS_MANUAL: 0
    steps:
      - name: Set retention days for manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: echo "RETAIN_DAYS=${{ env.RETAIN_DAYS_MANUAL }}" >> $GITHUB_ENV

      - name: Set retention days for scheduled trigger
        if: github.event_name == 'schedule'
        run: echo "RETAIN_DAYS=${{ env.RETAIN_DAYS_AUTO }}" >> $GITHUB_ENV

      - name: List and delete old workflow runs
        uses: actions/github-script@v6
        with:
          script: const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({
              auth:process.env.GITHUB_TOKEN
            });

            const daysToMillis = days => days * 24 * 60 * 60 * 1000;
            const retainDays = parseInt(process.env.RETAIN_DAYS);
            const cutoffDate = new Date(Date.now() - daysToMillis(retainDays));

            const getRuns = async (page) => {
              const runs = await octokit.actions.listWorkflowRunsForRepo({
                owner:context.repo.owner,
                repo:context.repo.repo,
                per_page:100,
                page:page
              });
              return runs.data.workflow_runs;
            };

            const deleteRun = async (runId) => {
              await octokit.actions.deleteWorkflowRun({
                owner:context.repo.owner,
                repo:context.repo.repo,
                run_id:runId
              });
            };

            const cleanup = async () => {
              let page = 1;
              let runs;
              do {
                runs = await getRuns(page);
                for (const run of runs) {
                  if (new Date(run.created_at) < cutoffDate && run.status !== 'in_progress' && run.status !== 'queued') {
                    console.log(`Deleting run:${run.id} created at:${run.created_at}`);
                    await deleteRun(run.id);
                  }
                }
                page += 1;
              } while (runs.length > 0);
            };

            cleanup().catch(error => {
              console.error(`Error deleting runs:${error.message}`);
            });
