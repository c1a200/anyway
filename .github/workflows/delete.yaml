name: Delete
on:
  schedule:
    - cron: "0 0 * * SUN"
  workflow_dispatch:

jobs:
  del_runs:
    runs-on: ubuntu-latest
    env:
      RETAIN_DAYS_AUTO: 7
      RETAIN_DAYS_MANUAL: 1
    steps:
      - name: Set retention days for manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: echo "RETAIN_DAYS=${{ env.RETAIN_DAYS_MANUAL }}" >> $GITHUB_ENV

      - name: Set retention days for scheduled trigger
        if: github.event_name == 'schedule'
        run: echo "RETAIN_DAYS=${{ env.RETAIN_DAYS_AUTO }}" >> $GITHUB_ENV

      - name: Delete old workflow runs
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GIST_PAT }}
        with:
          script: 
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({ auth:process.env.GITHUB_TOKEN });

            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const retainDays = parseInt(process.env.RETAIN_DAYS, 10);
            const cutoffDate = new Date(Date.now() - (retainDays * 24 * 60 * 60 * 1000));
            
            // Fetch workflow runs to delete
            async function listWorkflowRuns(page = 1, perPage = 100) {
              const result = await octokit.actions.listWorkflowRunsForRepo({
                owner,
                repo,
                per_page:perPage,
                page,
              });
              return result.data.workflow_runs;
            }

            async function deleteWorkflowRun(runId) {
              await octokit.actions.deleteWorkflowRun({
                owner,
                repo,
                run_id:runId,
              });
              console.log(`Deleted run:${runId}`);
            }

            async function cleanup() {
              let page = 1;
              let runs = [];
              let fetchedRuns = [];
              do {
                fetchedRuns = await listWorkflowRuns(page++);
                runs = runs.concat(fetchedRuns);
              } while (fetchedRuns.length > 0);

              runs.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));

              let deletedCount = 0;
              for (const run of runs) {
                if (new Date(run.created_at) < cutoffDate && (run.conclusion === 'success' run.conclusion === 'failure')) {
                  await deleteWorkflowRun(run.id);
                  deletedCount++;
                }
              }
              console.log(`Total deleted workflow runs:${deletedCount}`);
            }

            cleanup().catch(err => {
              console.error(`Error during cleanup:${err}`);
              process.exit(1);
            });
